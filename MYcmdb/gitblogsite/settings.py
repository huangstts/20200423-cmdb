"""
Django settings for gitblogsite project.

Generated by 'django-admin startproject' using Django 2.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os, sys

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0, os.path.join(BASE_DIR, 'extra_apps'))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '%#kh&jz0&)uedz6ss+s%+@74a6fx&i_30*9b029e7!hqmmp+(_'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
# DEBUG = False
ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'users',
    'cmdb',
    'api',
    'cbv',
    'xadmin.apps.XAdminConfig',
    'crispy_forms',
    'django_filters',
    'widget_tweaks',
    'rest_framework',
    'corsheaders',
    'django_celery_beat',
    # 'debug_toolbar',

]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # 'debug_toolbar.middleware.DebugToolbarMiddleware',
]

CORS_ORIGIN_ALLOW_ALL = True

ROOT_URLCONF = 'gitblogsite.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR,'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.media',
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'gitblogsite.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
#     }
# }

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'CMDB',
        'USER':'root',
        'PASSWORD':'Huangstts#',
        'HOST':'',
        'PORT':'',
    }
} 

# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]
 

#上传文件图片的根路径
MEDIA_ROOT = os.path.join(BASE_DIR, "media")
#访问文件的URL
MEDIA_URL = '/media/'
# 自定义用户表，在 settings.py 中添加如下配置信息
AUTH_USER_MODEL = 'users.UsersProfile'



# 设置用户登录相关信息
from django.urls import reverse_lazy
# 用户登录成功后跳转的 URL
LOGIN_REDIRECT_URL = reverse_lazy("index")

# 用户登录 GET 请求的 URL和登录验证失败后跳转到的 URL
LOGIN_URL = reverse_lazy('users:usersLogin')

# 自定义登录验证类
AUTHENTICATION_BACKENDS = (
    'users.users_auth.CustomBackend',  # 注意后面的逗号
)

# # Ansible 资源池配置文件

# INVENT_PATH = os.path.join(BASE_DIR, 'octopus/inventory/hosts')




# Celery 配置

# 配置消息中间件
CELERY_BROKER_URL = 'amqp://zxh:123@localhost:5672/zxhvhost'
# 以上信息需要在 rabbitmq 中添加:
# 用户 shark  命令为: rabbitmqctl add_user shark QFedu123
# 虚拟主机 qfvhost 命令为: rabbitmqctl add_vhost qfvhost
# 授权信息  命令为: rabbitmqctl set_permissions -p qfvhost shark ".*" ".*" ".*"

# CELERY_RESULT_BACKEND = 'db+sqlite:///results.sqlite'
CELERY_RESULT_BACKEND = 'redis://localhost:6379/1'
# CELERY_TASK_SERIALIZER = 'json'


# 执行任务的并发工作进程/线程/绿色线程的数量。
# 如果您主要执行I / O，则可以有更多的进程，
# 但如果主要是CPU约束，请尝试使其与计算机上的CPU数量保持接近。
# 如果未设置，将使用主机上的CPU /内核数。
CELERY_WORKER_CONCURRENCY	 = 6


# 延迟确认 意味着任务消息将在任务执行后得到确认
CELERY_TASK_ACKS_LATE = True

# 每个 worker 最多执行 60 个任务就自动销毁，防止内存泄露
CELERY_WORKER_MAX_TASKS_PER_CHILD = 60

# 单个任务的硬时间限制（秒）。
# 超过此值时，处理任务的工作进程将被终止并替换为新的工作进程。
CELERY_TASk_TIME_LIMIT = 5 * 60

######################################
# 配置 django-debug-toolbar

# 仅当IP地址列在“内部IP”设置中时，才会显示“调试”工具栏。
# 这意味着对于本地开发，必须将“127.0.0.1”添加到IntualIPS中；
# 如果在设置模块中不存在此设置，则需要创建此设置：
INTERNAL_IPS = [
    '127.0.0.1',
]

# DEBUG_TOOLBAR_CONFIG = {
#     # Toolbar options
#     'RESULTS_CACHE_SIZE': 3,
#     'SHOW_COLLAPSED': True,
#     # Panel options
#     'SQL_WARNING_THRESHOLD': 0.5,   # milliseconds 毫秒
# }